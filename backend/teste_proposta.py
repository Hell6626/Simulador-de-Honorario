#!/usr/bin/env python3
"""
Script para testar se a proposta est√° sendo salva corretamente
"""

from main import app
from models import Proposta, Cliente, Funcionario, TipoAtividade, RegimeTributario, Servico

def testar_proposta():
    """Testa se a proposta est√° sendo salva corretamente"""
    with app.app_context():
        print("üß™ TESTANDO SISTEMA DE PROPOSTAS")
        print("=" * 50)
        
        # 1. Verificar se h√° dados b√°sicos
        print("\nüìã DADOS B√ÅSICOS:")
        
        funcionarios = Funcionario.query.filter_by(ativo=True).all()
        print(f"‚úÖ {len(funcionarios)} funcion√°rios encontrados")
        
        clientes = Cliente.query.filter_by(ativo=True).all()
        print(f"‚úÖ {len(clientes)} clientes encontrados")
        
        tipos = TipoAtividade.query.filter_by(ativo=True).all()
        print(f"‚úÖ {len(tipos)} tipos de atividade encontrados")
        
        regimes = RegimeTributario.query.filter_by(ativo=True).all()
        print(f"‚úÖ {len(regimes)} regimes tribut√°rios encontrados")
        
        servicos = Servico.query.filter_by(ativo=True).all()
        print(f"‚úÖ {len(servicos)} servi√ßos encontrados")
        
        # 2. Verificar propostas existentes
        print("\nüìÑ PROPOSTAS EXISTENTES:")
        propostas = Proposta.query.filter_by(ativo=True).all()
        if propostas:
            print(f"‚úÖ {len(propostas)} propostas encontradas")
            for proposta in propostas:
                print(f"  - {proposta.numero} (R$ {proposta.valor_total:.2f}) - {proposta.status}")
                print(f"    Cliente: {proposta.cliente.nome if proposta.cliente else 'N/A'}")
                print(f"    Funcion√°rio: {proposta.funcionario_responsavel.nome if proposta.funcionario_responsavel else 'N/A'}")
                print(f"    Itens: {len(proposta.itens)}")
        else:
            print("‚ùå Nenhuma proposta encontrada!")
            print("üí° Crie propostas atrav√©s do frontend")
        
        # 3. Testar cria√ß√£o de proposta
        if clientes and funcionarios and tipos and regimes and servicos:
            print("\nüß™ TESTE DE CRIA√á√ÉO DE PROPOSTA:")
            try:
                # Criar proposta de teste
                proposta_teste = Proposta(
                    numero="TESTE-001",
                    cliente_id=clientes[0].id,
                    funcionario_responsavel_id=funcionarios[0].id,
                    tipo_atividade_id=tipos[0].id,
                    regime_tributario_id=regimes[0].id,
                    valor_total=1000.00,
                    status="RASCUNHO"
                )
                
                from config import db
                db.session.add(proposta_teste)
                db.session.commit()
                
                print("‚úÖ Proposta de teste criada com sucesso!")
                print(f"  - ID: {proposta_teste.id}")
                print(f"  - N√∫mero: {proposta_teste.numero}")
                print(f"  - Valor: R$ {proposta_teste.valor_total:.2f}")
                
                # Limpar proposta de teste
                db.session.delete(proposta_teste)
                db.session.commit()
                print("‚úÖ Proposta de teste removida")
                
            except Exception as e:
                print(f"‚ùå Erro ao criar proposta de teste: {e}")
        else:
            print("‚ùå Dados insuficientes para teste")
        
        print("\n" + "=" * 50)
        print("üéØ PR√ìXIMOS PASSOS:")
        print("1. Fa√ßa login com admin@gmail.com / admin123")
        print("2. Crie uma proposta atrav√©s do frontend")
        print("3. Verifique se aparece na lista")
        print("4. Execute este script novamente para verificar")

if __name__ == "__main__":
    testar_proposta()
