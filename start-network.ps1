# üåê Script PowerShell para iniciar Simulador de Honor√°rios na Rede Local
# =======================================================================

Write-Host "üåê Iniciando Simulador de Honor√°rios na Rede Local" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan

Write-Host ""
Write-Host "üìã Verificando configura√ß√µes..." -ForegroundColor Yellow

# Verificar se Python est√° instalado
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python encontrado: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n√£o encontrado! Instale Python 3.8+ primeiro." -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Verificar se Node.js est√° instalado
try {
    $nodeVersion = node --version 2>&1
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n√£o encontrado! Instale Node.js 16+ primeiro." -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

Write-Host ""
Write-Host "üîç Descobrindo IP da m√°quina..." -ForegroundColor Yellow

# Descobrir IP da m√°quina
$networkAdapters = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.IPAddress -like "192.168.*" -or $_.IPAddress -like "10.*" }
$ip = $networkAdapters[0].IPAddress

if (-not $ip) {
    Write-Host "‚ùå N√£o foi poss√≠vel descobrir o IP da rede local" -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

Write-Host "‚úÖ IP da m√°quina: $ip" -ForegroundColor Green

Write-Host ""
Write-Host "üöÄ Iniciando Backend (Flask)..." -ForegroundColor Yellow

# Iniciar Backend
$backendJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD
    Set-Location backend
    python main.py
}

Write-Host "‚è≥ Aguardando backend inicializar..." -ForegroundColor Yellow
Start-Sleep -Seconds 3

Write-Host ""
Write-Host "üöÄ Iniciando Frontend (Vite)..." -ForegroundColor Yellow

# Iniciar Frontend
$frontendJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD
    Set-Location frontend
    npm run dev
}

Write-Host ""
Write-Host "‚úÖ Aplica√ß√£o iniciada com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üåê URLs de Acesso:" -ForegroundColor Cyan
Write-Host "   Local:    http://localhost:5173" -ForegroundColor White
Write-Host "   Rede:     http://$ip:5173" -ForegroundColor White
Write-Host ""
Write-Host "üì± Para compartilhar com colegas:" -ForegroundColor Cyan
Write-Host "   Colegas acessam: http://$ip:5173" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è  IMPORTANTE:" -ForegroundColor Yellow
Write-Host "   - Certifique-se de que o firewall permite conex√µes na porta 5173" -ForegroundColor White
Write-Host "   - Todos os dispositivos devem estar na mesma rede local" -ForegroundColor White
Write-Host "   - Para parar os servi√ßos, pressione Ctrl+C" -ForegroundColor White
Write-Host ""

# Aguardar entrada do usu√°rio para parar
Write-Host "Pressione Ctrl+C para parar os servi√ßos..." -ForegroundColor Yellow
try {
    while ($true) {
        Start-Sleep -Seconds 1
        
        # Verificar se os jobs ainda est√£o rodando
        if ($backendJob.State -eq "Failed") {
            Write-Host "‚ùå Backend falhou!" -ForegroundColor Red
            break
        }
        
        if ($frontendJob.State -eq "Failed") {
            Write-Host "‚ùå Frontend falhou!" -ForegroundColor Red
            break
        }
    }
} catch {
    Write-Host ""
    Write-Host "üõë Parando servi√ßos..." -ForegroundColor Yellow
    
    # Parar jobs
    Stop-Job $backendJob -ErrorAction SilentlyContinue
    Stop-Job $frontendJob -ErrorAction SilentlyContinue
    
    # Remover jobs
    Remove-Job $backendJob -ErrorAction SilentlyContinue
    Remove-Job $frontendJob -ErrorAction SilentlyContinue
    
    Write-Host "‚úÖ Servi√ßos parados com sucesso!" -ForegroundColor Green
}
